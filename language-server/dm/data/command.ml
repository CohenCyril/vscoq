(** This file is auto-generated *)

module Command = struct

  let commandJson = ["{\"label\": \"Goal\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Goal` (command)\n#### Usage\n| `Goal` *type*  \"}, \"kind\": 23}";
    "{\"label\": \"Pwd\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Pwd` (command)\n#### Usage\n| `Pwd`\"}, \"kind\": 23}";
    "{\"label\": \"Cd\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Cd` (command)\n#### Usage\n| `Cd` *string*?  \"}, \"kind\": 23}";
    "{\"label\": \"Load\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Load` (command)\n#### Usage\n| `Load` `Verbose`? [ *string* | *ident* ]  \"}, \"kind\": 23}";
    "{\"label\": \"Declare\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Declare` (command)\n#### Usage\n| `Declare` `Custom` `Entry` *ident*  \n| `Declare` `Equivalent` `Keys` *one_term* *one_term*  \n| `Declare` `Instance` *ident_decl* *binder** `:` *term* *hint_info*?  \n| `Declare` `Left` `Step` *one_term*  \n| `Declare` `ML` `Module` *string*+  \n| `Declare` `Module` ( [ `Import` | `Export` ] *import_categories*? )? *ident* *module_binder** `:` *module_type_inl*  \n| `Declare` `Morphism` *one_term* `:` *ident*  \n| `Declare` `Reduction` *ident* `:=` *red_expr*  \n| `Declare` `Right` `Step` *one_term*  \n| `Declare` `Scope` *scope_name*  \"}, \"kind\": 23}";
    "{\"label\": \"Locate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Locate` (command)\n#### Usage\n| `Locate` *reference*  \n| `Locate` `File` *string*  \n| `Locate` `Library` *qualid*  \n| `Locate` `Ltac` *qualid*  \n| `Locate` `Module` *qualid*  \n| `Locate` `Term` *reference*  \n#### Usage (ltac2 plugin)\n| `Locate` `Ltac2` *qualid*  \"}, \"kind\": 23}";
    "{\"label\": \"Info\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Info` (command)\n#### Usage\n| `Info` *natural* *ltac_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"Add\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Add` (command)\n#### Usage\n| `Add` *setting_name* [ *qualid* | *string* ]+  \n| `Add` `LoadPath` *string* `as` *dirpath*  \n| `Add` `ML` `Path` *string*  \n| `Add` `Morphism` *one_term* `:` *ident*  \n| `Add` `Morphism` *one_term* `with` `signature` *term* `as` *ident*  \n| `Add` `Parametric` `Morphism` *binder** `:` *one_term* `with` `signature` *term* `as` *ident*  \n| `Add` `Parametric` `Relation` *binder** `:` *one_term* *one_term* ( `reflexivity` `proved` `by` *one_term* )? ( `symmetry` `proved` `by` *one_term* )? ( `transitivity` `proved` `by` *one_term* )? `as` *ident*  \n| `Add` `Parametric` `Setoid` *binder** `:` *one_term* *one_term* *one_term* `as` *ident*  \n| `Add` `Rec` `LoadPath` *string* `as` *dirpath*  \n| `Add` `Relation` *one_term* *one_term* ( `reflexivity` `proved` `by` *one_term* )? ( `symmetry` `proved` `by` *one_term* )? ( `transitivity` `proved` `by` *one_term* )? `as` *ident*  \n| `Add` `Setoid` *one_term* *one_term* *one_term* `as` *ident*  \n#### Usage (Micromega plugin)\n| `Add` `Zify` *add_zify* *qualid*  \n#### Usage (ring plugin)\n| `Add` `Field` *ident* `:` *one_term* ( `(` ( *field_mod* `,` )+ `)` )?  \n| `Add` `Ring` *ident* `:` *one_term* ( `(` ( *ring_mod* `,` )+ `)` )?  \"}, \"kind\": 23}";
    "{\"label\": \"Show\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Show` (command)\n#### Usage\n| `Show` [ *ident* | *natural* ]?  \n| `Show` `Conjectures`  \n| `Show` `Existentials`  \n| `Show` `Goal` *natural* `at` *natural*  \n| `Show` `Intro`  \n| `Show` `Intros`  \n| `Show` `Ltac` `Profile` [ `CutOff` *integer* | *string* ]?  \n| `Show` `Match` *qualid*  \n| `Show` `Obligation` `Tactic`  \n| `Show` `Proof` ( `Diffs` `removed`? )?  \n| `Show` `Universes`  \n#### Usage (Micromega plugin)\n| `Show` `Zify` *show_zify*  \n#### Usage (extraction plugin)\n| `Show` `Extraction`  \n#### Usage (micromega plugin)\n| `Show` `Lia` `Profile`  \"}, \"kind\": 23}";
    "{\"label\": \"Remove\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Remove` (command)\n#### Usage\n| `Remove` *setting_name* [ *qualid* | *string* ]+  \n| `Remove` `Hints` *qualid*+ ( `:` *ident*+ )?  \n| `Remove` `LoadPath` *string*  \"}, \"kind\": 23}";
    "{\"label\": \"Type\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Type` (command)\n#### Usage\n| `Type` *term*  \"}, \"kind\": 23}";
    "{\"label\": \"Print\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Print` (command)\n#### Usage\n| `Print` `All`  \n| `Print` `All` `Dependencies` *reference*  \n| `Print` `Assumptions` *reference*  \n| `Print` `Canonical` `Projections` *reference**  \n| `Print` `Classes`  \n| `Print` `Coercion` `Paths` *coercion_class* *coercion_class*  \n| `Print` `Coercions`  \n| `Print` `Custom` `Grammar` *ident*  \n| `Print` `Debug` `GC`  \n| `Print` `Equivalent` `Keys`  \n| `Print` `Firstorder` `Solver`  \n| `Print` `Grammar` *ident**  \n| `Print` `Graph`  \n| `Print` `HintDb` *ident*  \n| `Print` `Hint` [ `*` | *reference* ]?  \n| `Print` `Implicit` *reference*  \n| `Print` `Instances` *reference*  \n| `Print` `Keywords`  \n| `Print` `Libraries`  \n| `Print` `LoadPath` *dirpath*?  \n| `Print` `Ltac` *qualid*  \n| `Print` `Ltac` `Signatures`  \n| `Print` `ML` `Modules`  \n| `Print` `ML` `Path`  \n| `Print` `Module` *qualid*  \n| `Print` `Module` `Type` *qualid*  \n| `Print` `Namespace` *dirpath*  \n| `Print` `Notation` *string* [ `in` `custom` *ident* ]?  \n| `Print` `Opaque` `Dependencies` *reference*  \n| `Print` `Options`  \n| `Print` `Registered`  \n| `Print` `Rewrite` `HintDb` *ident*  \n| `Print` `Scope` *scope_name*  \n| `Print` `Scopes`  \n| `Print` `Section` *qualid*  \n| `Print` `Sorted`? `Universes` ( `Subgraph` `(` *qualid** `)` )? *string*?  \n| `Print` `Strategies`  \n| `Print` `Strategy` *reference*  \n| `Print` `Table` *setting_name*  \n| `Print` `Tables`  \n| `Print` `Term`? *reference* *univ_name_list*?  \n| `Print` `Transparent` `Dependencies` *reference*  \n| `Print` `Typeclasses`  \n| `Print` `Typing` `Flags`  \n| `Print` `Visibility` *scope_name*?  \n#### Usage (SSReflect)\n| `Print` `Hint` `View` *ssrviewpos*?  \n#### Usage (extraction plugin)\n| `Print` `Extraction` `Blacklist`  \n| `Print` `Extraction` `Inline`  \n#### Usage (ltac2 plugin)\n| `Print` `Ltac2` *qualid*  \n| `Print` `Ltac2` `Signatures`  \n#### Usage (ring plugin)\n| `Print` `Fields`  \n| `Print` `Rings`  \"}, \"kind\": 23}";
    "{\"label\": \"Inspect\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Inspect` (command)\n#### Usage\n| `Inspect` *natural*  \"}, \"kind\": 23}";
    "{\"label\": \"Test\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Test` (command)\n#### Usage\n| `Test` *setting_name* ( `for` [ *qualid* | *string* ]+ )?  \"}, \"kind\": 23}";
    "{\"label\": \"Reset\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Reset` (command)\n#### Usage\n| `Reset` *ident*  \n| `Reset` `Initial`  \n| `Reset` `Ltac` `Profile`  \n#### Usage (extraction plugin)\n| `Reset` `Extraction` `Blacklist`  \n| `Reset` `Extraction` `Inline`  \"}, \"kind\": 23}";
    "{\"label\": \"Back\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Back` (command)\n#### Usage\n| `Back` *natural*?  \"}, \"kind\": 23}";
    "{\"label\": \"Debug\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Debug` (command)\n#### Usage\n| `Debug` [ `On` | `Off` ]  \"}, \"kind\": 23}";
    "{\"label\": \"Derive\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Derive` (command)\n#### Usage\n| `Derive` `Dependent` `Inversion_clear` *ident* `with` *one_term* `Sort` *sort_family*  \n| `Derive` `Dependent` `Inversion` *ident* `with` *one_term* `Sort` *sort_family*  \n| `Derive` `Inversion_clear` *ident* `with` *one_term* ( `Sort` *sort_family* )?  \n| `Derive` `Inversion` *ident* `with` *one_term* ( `Sort` *sort_family* )?  \n#### Usage (derive plugin)\n| `Derive` *ident* `SuchThat` *one_term* `As` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"Extraction\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Extraction` (command)\n#### Usage (extraction plugin)\n| `Extraction` *qualid*  \n| `Extraction` *string* *qualid*+  \n| `Extraction` `Blacklist` *ident*+  \n| `Extraction` `Implicit` *qualid* `[` [ *ident* | *integer* ]* `]`  \n| `Extraction` `Inline` *qualid*+  \n| `Extraction` `Language` *language*  \n| `Extraction` `Library` *ident*  \n| `Extraction` `NoInline` *qualid*+  \n| `Extraction` `TestCompile` *qualid*+  \"}, \"kind\": 23}";
    "{\"label\": \"Recursive\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Recursive` (command)\n#### Usage (extraction plugin)\n| `Recursive` `Extraction` *qualid*+  \n| `Recursive` `Extraction` `Library` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"Separate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Separate` (command)\n#### Usage (extraction plugin)\n| `Separate` `Extraction` *qualid*+  \"}, \"kind\": 23}";
    "{\"label\": \"Extract\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Extract` (command)\n#### Usage (extraction plugin)\n| `Extract` `Constant` *qualid* *string** `=>` [ *ident* | *string* ]  \n| `Extract` `Inductive` *qualid* `=>` [ *ident* | *string* ] `[` [ *ident* | *string* ]* `]` *string*?  \n| `Extract` `Inlined` `Constant` *qualid* `=>` [ *ident* | *string* ]  \"}, \"kind\": 23}";
    "{\"label\": \"Proof\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Proof` (command)\n#### Usage\n| `Proof` *term*  \n| `Proof` `Mode` *string*  \n| `Proof` `using` *section_var_expr* [ `with` *ltac_expr* ]?  \n| `Proof` `with` *ltac_expr* [ `using` *section_var_expr* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Abort\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Abort` (command)\n#### Usage\n| `Abort` `All`?  \"}, \"kind\": 23}";
    "{\"label\": \"Admitted\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Admitted` (command)\n#### Usage\n| `Admitted`\"}, \"kind\": 23}";
    "{\"label\": \"Qed\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Qed` (command)\n#### Usage\n| `Qed`\"}, \"kind\": 23}";
    "{\"label\": \"Save\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Save` (command)\n#### Usage\n| `Save` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"Defined\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Defined` (command)\n#### Usage\n| `Defined` *ident*?  \"}, \"kind\": 23}";
    "{\"label\": \"Restart\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Restart` (command)\n#### Usage\n| `Restart`\"}, \"kind\": 23}";
    "{\"label\": \"Undo\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Undo` (command)\n#### Usage\n| `Undo` ( `To`? *natural* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Focus\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Focus` (command)\n#### Usage\n| `Focus` *natural*?  \"}, \"kind\": 23}";
    "{\"label\": \"Unfocus\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Unfocus` (command)\n#### Usage\n| `Unfocus`\"}, \"kind\": 23}";
    "{\"label\": \"Unfocused\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Unfocused` (command)\n#### Usage\n| `Unfocused`\"}, \"kind\": 23}";
    "{\"label\": \"Guarded\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Guarded` (command)\n#### Usage\n| `Guarded`\"}, \"kind\": 23}";
    "{\"label\": \"Create\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Create` (command)\n#### Usage\n| `Create` `HintDb` *ident* `discriminated`?  \"}, \"kind\": 23}";
    "{\"label\": \"Comments\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Comments` (command)\n#### Usage\n| `Comments` [ *one_term* | *string* | *natural* ]*  \"}, \"kind\": 23}";
    "{\"label\": \"Obligation\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Obligation` (command)\n#### Usage\n| `Obligation` *natural* ( `of` *ident* )? ( `:` *type* ( `with` *ltac_expr* )? )?  \n| `Obligation` `Tactic` `:=` *ltac_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"Next\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Next` (command)\n#### Usage\n| `Next` `Obligation` ( `of` *ident* )? ( `with` *ltac_expr* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Solve\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Solve` (command)\n#### Usage\n| `Solve` `All` `Obligations` ( `with` *ltac_expr* )?  \n| `Solve` `Obligations` ( `of` *ident* )? ( `with` *ltac_expr* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Admit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Admit` (command)\n#### Usage\n| `Admit` `Obligations` ( `of` *ident* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Obligations\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Obligations` (command)\n#### Usage\n| `Obligations` ( `of` *ident* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Preterm\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Preterm` (command)\n#### Usage\n| `Preterm` ( `of` *ident* )?  \"}, \"kind\": 23}";
    "{\"label\": \"Unshelve\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Unshelve` (command)\n#### Usage\n| `Unshelve`\"}, \"kind\": 23}";
    "{\"label\": \"Optimize\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Optimize` (command)\n#### Usage\n| `Optimize` `Heap`  \n| `Optimize` `Proof`  \"}, \"kind\": 23}";
    "{\"label\": \"infoH\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `infoH` (command)\n#### Usage\n| `infoH` *ltac_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"Hint\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Hint` (command)\n#### Usage\n| `Hint` [ `Constants` | `Variables` ] [ `Transparent` | `Opaque` ] ( `:` *ident*+ )?  \n| `Hint` [ `Transparent` | `Opaque` ] *qualid*+ ( `:` *ident*+ )?  \n| `Hint` `Constructors` *qualid*+ ( `:` *ident*+ )?  \n| `Hint` `Cut` `[` *hints_regexp* `]` ( `:` *ident*+ )?  \n| `Hint` `Extern` *natural* *one_pattern*? `=>` *ltac_expr* ( `:` *ident*+ )?  \n| `Hint` `Immediate` [ *qualid* | *one_term* ]+ ( `:` *ident*+ )?  \n| `Hint` `Mode` *qualid* [ `+` | `!` | `-` ]+ ( `:` *ident*+ )?  \n| `Hint` `Resolve` [ *qualid* | *one_term* ]+ *hint_info*? ( `:` *ident*+ )?  \n| `Hint` `Resolve` [ `->` | `<-` ] *qualid*+ *natural*? ( `:` *ident*+ )?  \n| `Hint` `Rewrite` [ `->` | `<-` ]? *one_term*+ ( `using` *ltac_expr* )? ( `:` *ident** )?  \n| `Hint` `Unfold` *qualid*+ ( `:` *ident*+ )?  \n#### Usage (SSReflect)\n| `Hint` `View` *ssrviewpos*? ( *one_term* ( `|` *natural* )? )+  \"}, \"kind\": 23}";
    "{\"label\": \"Prenex\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Prenex` (command)\n#### Usage (SSReflect)\n| `Prenex` `Implicits` *qualid*+  \"}, \"kind\": 23}";
    "{\"label\": \"Typeclasses\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Typeclasses` (command)\n#### Usage\n| `Typeclasses` `Opaque` *qualid*+  \n| `Typeclasses` `Transparent` *qualid*+  \n| `Typeclasses` `eauto` `:=` `debug`? ( `(` [ `bfs` | `dfs` ] `)` )? *natural*?  \"}, \"kind\": 23}";
    "{\"label\": \"Tactic\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Tactic` (command)\n#### Usage\n| `Tactic` `Notation` ( `(` `at` `level` *natural* `)` )? *ltac_production_item*+ `:=` *ltac_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"Ltac\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Ltac` (command)\n#### Usage\n| `Ltac` *tacdef_body* ( `with` *tacdef_body* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Function\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Function` (command)\n#### Usage\n| `Function` *fix_definition* ( `with` *fix_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Functional\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Functional` (command)\n#### Usage\n| `Functional` `Scheme` *func_scheme_def* ( `with` *func_scheme_def* )*  \n#### Usage (funind plugin)\n| `Functional` `Case` *func_scheme_def*  \"}, \"kind\": 23}";
    "{\"label\": \"Generate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Generate` (command)\n#### Usage (funind plugin)\n| `Generate` `graph` `for` *qualid*  \"}, \"kind\": 23}";
    "{\"label\": \"Number\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Number` (command)\n#### Usage\n| `Number` `Notation` *qualid* *qualid* *qualid* ( `(` ( *number_modifier* `,` )+ `)` )? `:` *scope_name*  \"}, \"kind\": 23}";
    "{\"label\": \"String\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `String` (command)\n#### Usage\n| `String` `Notation` *qualid* *qualid* *qualid* ( `(` *number_string_via* `)` )? `:` *scope_name*  \"}, \"kind\": 23}";
    "{\"label\": \"SubClass\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `SubClass` (command)\n#### Usage\n| `SubClass` *ident_decl* *def_body*  \"}, \"kind\": 23}";
    "{\"label\": \"Let\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Let` (command)\n#### Usage\n| `Let` *ident_decl* *def_body*  \n| `Let` `CoFixpoint` *cofix_definition* ( `with` *cofix_definition* )*  \n| `Let` `Fixpoint` *fix_definition* ( `with` *fix_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Inductive\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Inductive` (command)\n#### Usage\n| `Inductive` *inductive_definition* ( `with` *inductive_definition* )*  \n| `Inductive` *record_definition* ( `with` *record_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Fixpoint\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Fixpoint` (command)\n#### Usage\n| `Fixpoint` *fix_definition* ( `with` *fix_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"CoFixpoint\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `CoFixpoint` (command)\n#### Usage\n| `CoFixpoint` *cofix_definition* ( `with` *cofix_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Scheme\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Scheme` (command)\n#### Usage\n| `Scheme` ( *ident* `:=` )? *scheme_kind* ( `with` ( *ident* `:=` )? *scheme_kind* )*  \n| `Scheme` `Boolean`? `Equality` `for` *reference*  \"}, \"kind\": 23}";
    "{\"label\": \"Combined\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Combined` (command)\n#### Usage\n| `Combined` `Scheme` *ident* `from` ( *ident* `,` )+  \"}, \"kind\": 23}";
    "{\"label\": \"Register\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Register` (command)\n#### Usage\n| `Register` *qualid* `as` *qualid*  \n| `Register` `Inline` *qualid*  \"}, \"kind\": 23}";
    "{\"label\": \"Primitive\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Primitive` (command)\n#### Usage\n| `Primitive` *ident_decl* [ `:` *term* ]? `:=` `#` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"Universe\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Universe` (command)\n#### Usage\n| `Universe` *ident*+  \"}, \"kind\": 23}";
    "{\"label\": \"Universes\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Universes` (command)\n#### Usage\n| `Universes` *ident*+  \"}, \"kind\": 23}";
    "{\"label\": \"Constraint\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Constraint` (command)\n#### Usage\n| `Constraint` ( *univ_constraint* `,` )+  \"}, \"kind\": 23}";
    "{\"label\": \"CoInductive\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `CoInductive` (command)\n#### Usage\n| `CoInductive` *inductive_definition* ( `with` *inductive_definition* )*  \n| `CoInductive` *record_definition* ( `with` *record_definition* )*  \"}, \"kind\": 23}";
    "{\"label\": \"Variant\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Variant` (command)\n#### Usage\n| `Variant` *ident_decl* *binder** [ `|` *binder** ]? [ `:` *type* ]? `:=` `|`? ( *constructor* `|` )+ *decl_notations*?  \"}, \"kind\": 23}";
    "{\"label\": \"Class\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Class` (command)\n#### Usage\n| `Class` *ident_decl* *binder** [ `:` *sort* ]? `:=` *constructor*  \n| `Class` *record_definition*  \"}, \"kind\": 23}";
    "{\"label\": \"Module\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Module` (command)\n#### Usage\n| `Module` ( [ `Import` | `Export` ] *import_categories*? )? *ident* *module_binder** *of_module_type*? ( `:=` ( *module_expr_inl* `<+` )+ )?  \n| `Module` `Type` *ident* *module_binder** ( `<:` *module_type_inl* )* ( `:=` ( *module_type_inl* `<+` )+ )?  \"}, \"kind\": 23}";
    "{\"label\": \"Section\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Section` (command)\n#### Usage\n| `Section` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"End\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `End` (command)\n#### Usage\n| `End` *ident*  \"}, \"kind\": 23}";
    "{\"label\": \"Collection\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Collection` (command)\n#### Usage\n| `Collection` *ident* `:=` *section_var_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"From\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `From` (command)\n#### Usage\n| `From` *dirpath* `Extra` `Dependency` *string* [ `as` *ident* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Import\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Import` (command)\n#### Usage\n| `Import` *import_categories*? *filtered_import*+  \n#### Usage (SSReflect)\n| `Import` `Prenex` `Implicits`  \"}, \"kind\": 23}";
    "{\"label\": \"Export\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Export` (command)\n#### Usage\n| `Export` *import_categories*? *filtered_import*+  \"}, \"kind\": 23}";
    "{\"label\": \"Include\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Include` (command)\n#### Usage\n| `Include` *module_type_inl* ( `<+` *module_expr_inl* )*  \n| `Include` `Type` ( *module_type_inl* `<+` )+  \"}, \"kind\": 23}";
    "{\"label\": \"Transparent\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Transparent` (command)\n#### Usage\n| `Transparent` *reference*+  \"}, \"kind\": 23}";
    "{\"label\": \"Opaque\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Opaque` (command)\n#### Usage\n| `Opaque` *reference*+  \"}, \"kind\": 23}";
    "{\"label\": \"Strategy\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Strategy` (command)\n#### Usage\n| `Strategy` [ *strategy_level* `[` *reference*+ `]` ]+  \"}, \"kind\": 23}";
    "{\"label\": \"Canonical\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Canonical` (command)\n#### Usage\n| `Canonical` `Structure`? *ident_decl* *def_body*  \n| `Canonical` `Structure`? *reference*  \"}, \"kind\": 23}";
    "{\"label\": \"Coercion\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Coercion` (command)\n#### Usage\n| `Coercion` *ident_decl* *def_body*  \n| `Coercion` *reference* [ `:` *coercion_class* `>->` *coercion_class* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Identity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Identity` (command)\n#### Usage\n| `Identity` `Coercion` *ident* `:` *coercion_class* `>->` *coercion_class*  \"}, \"kind\": 23}";
    "{\"label\": \"Context\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Context` (command)\n#### Usage\n| `Context` *binder*+  \"}, \"kind\": 23}";
    "{\"label\": \"Instance\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Instance` (command)\n#### Usage\n| `Instance` ( *ident_decl* *binder** )? `:` *type* *hint_info*? [ `:=` `{` *field_val** `}` | `:=` *term* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Existing\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Existing` (command)\n#### Usage\n| `Existing` `Class` *qualid*  \n| `Existing` `Instance` *qualid* *hint_info*?  \n| `Existing` `Instances` *qualid*+ [ `|` *natural* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Arguments\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Arguments` (command)\n#### Usage\n| `Arguments` *reference* *arg_specs** [ `,` *implicits_alt** ]* [ `:` ( *args_modifier* `,` )+ ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Implicit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Implicit` (command)\n#### Usage\n| `Implicit` [ `Type` | `Types` ] *reserv_list*  \"}, \"kind\": 23}";
    "{\"label\": \"Generalizable\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Generalizable` (command)\n#### Usage\n| `Generalizable` [ [ `Variable` | `Variables` ] *ident*+ | `All` `Variables` | `No` `Variables` ]  \"}, \"kind\": 23}";
    "{\"label\": \"Set\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Set` (command)\n#### Usage\n| `Set` *setting_name* [ *integer* | *string* ]?  \"}, \"kind\": 23}";
    "{\"label\": \"Unset\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Unset` (command)\n#### Usage\n| `Unset` *setting_name*  \"}, \"kind\": 23}";
    "{\"label\": \"Open\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Open` (command)\n#### Usage\n| `Open` `Scope` *scope*  \"}, \"kind\": 23}";
    "{\"label\": \"Close\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Close` (command)\n#### Usage\n| `Close` `Scope` *scope*  \"}, \"kind\": 23}";
    "{\"label\": \"Delimit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Delimit` (command)\n#### Usage\n| `Delimit` `Scope` *scope_name* `with` *scope_key*  \"}, \"kind\": 23}";
    "{\"label\": \"Undelimit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Undelimit` (command)\n#### Usage\n| `Undelimit` `Scope` *scope_name*  \"}, \"kind\": 23}";
    "{\"label\": \"Bind\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Bind` (command)\n#### Usage\n| `Bind` `Scope` *scope_name* `with` *coercion_class*+  \"}, \"kind\": 23}";
    "{\"label\": \"Infix\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Infix` (command)\n#### Usage\n| `Infix` *notation_declaration*  \"}, \"kind\": 23}";
    "{\"label\": \"Notation\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Notation` (command)\n#### Usage\n| `Notation` *ident* *ident** `:=` *one_term* ( `(` ( *syntax_modifier* `,` )+ `)` )?  \n| `Notation` *notation_declaration*  \"}, \"kind\": 23}";
    "{\"label\": \"Reserved\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Reserved` (command)\n#### Usage\n| `Reserved` `Infix` *string* ( `(` ( *syntax_modifier* `,` )+ `)` )?  \n| `Reserved` `Notation` *string* ( `(` ( *syntax_modifier* `,` )+ `)` )?  \"}, \"kind\": 23}";
    "{\"label\": \"Eval\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Eval` (command)\n#### Usage\n| `Eval` *red_expr* `in` *term*  \"}, \"kind\": 23}";
    "{\"label\": \"Compute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Compute` (command)\n#### Usage\n| `Compute` *term*  \"}, \"kind\": 23}";
    "{\"label\": \"Check\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Check` (command)\n#### Usage\n| `Check` *term*  \"}, \"kind\": 23}";
    "{\"label\": \"About\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `About` (command)\n#### Usage\n| `About` *reference* *univ_name_list*?  \"}, \"kind\": 23}";
    "{\"label\": \"SearchPattern\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `SearchPattern` (command)\n#### Usage\n| `SearchPattern` *one_pattern* ( [ `inside` | `in` | `outside` ] *qualid*+ )?  \"}, \"kind\": 23}";
    "{\"label\": \"SearchRewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `SearchRewrite` (command)\n#### Usage\n| `SearchRewrite` *one_pattern* ( [ `inside` | `in` | `outside` ] *qualid*+ )?  \"}, \"kind\": 23}";
    "{\"label\": \"Search\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Search` (command)\n#### Usage\n| `Search` ( *search_query* )+ ( [ `inside` | `in` | `outside` ] *qualid*+ )?  \"}, \"kind\": 23}";
    "{\"label\": \"Ltac2\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Ltac2` (command)\n#### Usage\n| `Ltac2` `@` `external` *ident* `:` *ltac2_type* `:=` *string* *string*  \n| `Ltac2` `Set` *qualid* [ `as` *ident* ]? `:=` *ltac2_expr*  \n| `Ltac2` `Type` `rec`? *tac2typ_def* ( `with` *tac2typ_def* )*  \n| `Ltac2` `mutable`? `rec`? *tac2def_body* ( `with` *tac2def_body* )*  \n#### Usage (Ltac2 plugin)\n| `Ltac2` `Notation` [ *string* | *lident* ] `:=` *ltac2_expr*  \n#### Usage (ltac2 plugin)\n| `Ltac2` `Eval` *ltac2_expr*  \n| `Ltac2` `Notation` *ltac2_scope*+ ( `:` *natural* )? `:=` *ltac2_expr*  \"}, \"kind\": 23}";
    "{\"label\": \"Time\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Time` (command)\n#### Usage\n| `Time` *sentence*  \"}, \"kind\": 23}";
    "{\"label\": \"Redirect\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Redirect` (command)\n#### Usage\n| `Redirect` *string* *sentence*  \"}, \"kind\": 23}";
    "{\"label\": \"Timeout\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Timeout` (command)\n#### Usage\n| `Timeout` *natural* *sentence*  \"}, \"kind\": 23}";
    "{\"label\": \"Fail\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Fail` (command)\n#### Usage\n| `Fail` *sentence*  \"}, \"kind\": 23}";
    "{\"label\": \"Succeed\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Succeed` (command)\n#### Usage\n| `Succeed` *sentence*  \"}, \"kind\": 23}";
    "{\"label\": \"Drop\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Drop` (command)\n#### Usage\n| `Drop`\"}, \"kind\": 23}";
    "{\"label\": \"Quit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `Quit` (command)\n#### Usage\n| `Quit`\"}, \"kind\": 23}";
    "{\"label\": \"BackTo\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `BackTo` (command)\n#### Usage\n| `BackTo` *natural*  \"}, \"kind\": 23}"]

  let command = List.map Yojson.Safe.from_string commandJson

end
