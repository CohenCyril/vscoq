(** This file is auto-generated *)

module Tactic = struct

  let tacticJson = ["{\"label\": \"reflexivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `reflexivity` (tactic)\n#### Usage\n| `reflexivity`\"}, \"kind\": 2}";
    "{\"label\": \"exact\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `exact` (tactic)\n#### Usage\n| `exact` *one_term*  \n#### Usage (SSReflect)\n| `exact`   \n| `exact` [ `:` *ssragen* *ssragens*? | *ssrbwdview* *ssrclear*? | *ssrclear* ]  \n| `exact` `<:` *term*  \"}, \"kind\": 2}";
    "{\"label\": \"assumption\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `assumption` (tactic)\n#### Usage\n| `assumption`\"}, \"kind\": 2}";
    "{\"label\": \"etransitivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `etransitivity` (tactic)\n#### Usage\n| `etransitivity`\"}, \"kind\": 2}";
    "{\"label\": \"cut\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cut` (tactic)\n#### Usage\n| `cut` *one_type*  \"}, \"kind\": 2}";
    "{\"label\": \"exact_no_check\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `exact_no_check` (tactic)\n#### Usage\n| `exact_no_check` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"vm_cast_no_check\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `vm_cast_no_check` (tactic)\n#### Usage\n| `vm_cast_no_check` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"native_cast_no_check\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `native_cast_no_check` (tactic)\n#### Usage\n| `native_cast_no_check` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"casetype\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `casetype` (tactic)\n#### Usage\n| `casetype` *one_type*  \"}, \"kind\": 2}";
    "{\"label\": \"elimtype\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `elimtype` (tactic)\n#### Usage\n| `elimtype` *one_type*  \"}, \"kind\": 2}";
    "{\"label\": \"lapply\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `lapply` (tactic)\n#### Usage\n| `lapply` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"transitivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `transitivity` (tactic)\n#### Usage\n| `transitivity` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"left\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `left` (tactic)\n#### Usage\n| `left` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"eleft\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eleft` (tactic)\n#### Usage\n| `eleft` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"right\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `right` (tactic)\n#### Usage\n| `right` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"eright\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eright` (tactic)\n#### Usage\n| `eright` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"constructor\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `constructor` (tactic)\n#### Usage\n| `constructor` *nat_or_var*? ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"econstructor\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `econstructor` (tactic)\n#### Usage\n| `econstructor` ( *nat_or_var* ( `with` *bindings* )? )?  \"}, \"kind\": 2}";
    "{\"label\": \"specialize\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `specialize` (tactic)\n#### Usage\n| `specialize` *one_term_with_bindings* *as_ipat*?  \"}, \"kind\": 2}";
    "{\"label\": \"symmetry\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `symmetry` (tactic)\n#### Usage\n| `symmetry` *simple_occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"split\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `split` (tactic)\n#### Usage\n| `split` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"esplit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `esplit` (tactic)\n#### Usage\n| `esplit` ( `with` *bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"exists\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `exists` (tactic)\n#### Usage\n| `exists` ( *bindings* `,` )*  \"}, \"kind\": 2}";
    "{\"label\": \"eexists\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eexists` (tactic)\n#### Usage\n| `eexists` ( *bindings* `,` )*  \"}, \"kind\": 2}";
    "{\"label\": \"intros\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `intros` (tactic)\n#### Usage\n| `intros` *intropattern**  \n| `intros` `until` [ *ident* | *natural* ]  \"}, \"kind\": 2}";
    "{\"label\": \"intro\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `intro` (tactic)\n#### Usage\n| `intro` *ident*? *where*?  \"}, \"kind\": 2}";
    "{\"label\": \"move\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `move` (tactic)\n#### Usage\n| `move` *ident* *where*  \n#### Usage (SSReflect)\n| `move` ( *ssrarg*? [ `->` | `<-` ] )?  \n| `move` *ssrarg* *ssr_in*?  \"}, \"kind\": 2}";
    "{\"label\": \"rename\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rename` (tactic)\n#### Usage\n| `rename` ( *ident* `into` *ident* `,` )+  \"}, \"kind\": 2}";
    "{\"label\": \"revert\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `revert` (tactic)\n#### Usage\n| `revert` *ident*+  \n| `revert` `dependent` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"simple\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `simple` (tactic)\n#### Usage\n| `simple` `apply` ( *one_term_with_bindings* `,` )+ *in_hyp_as*?  \n| `simple` `congruence` *natural*? ( `with` *one_term*+ )?  \n| `simple` `destruct` [ *ident* | *natural* ]  \n| `simple` `eapply` ( *one_term_with_bindings* `,` )+ *in_hyp_as*?  \n| `simple` `induction` [ *ident* | *natural* ]  \n| `simple` `injection` *induction_arg*?  \n| `simple` `inversion` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? ( `in` *ident*+ )?  \n| `simple` `subst`  \"}, \"kind\": 2}";
    "{\"label\": \"admit\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `admit` (tactic)\n#### Usage\n| `admit`\"}, \"kind\": 2}";
    "{\"label\": \"clear\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `clear` (tactic)\n#### Usage\n| `clear` ( `-`? *ident*+ )?  \n| `clear` `dependent` *ident*  \n#### Usage (SSReflect)\n| `clear` *natural*  \"}, \"kind\": 2}";
    "{\"label\": \"clearbody\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `clearbody` (tactic)\n#### Usage\n| `clearbody` *ident*+  \"}, \"kind\": 2}";
    "{\"label\": \"simplify_eq\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `simplify_eq` (tactic)\n#### Usage\n| `simplify_eq` *induction_arg*?  \"}, \"kind\": 2}";
    "{\"label\": \"esimplify_eq\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `esimplify_eq` (tactic)\n#### Usage\n| `esimplify_eq` *induction_arg*?  \"}, \"kind\": 2}";
    "{\"label\": \"discriminate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `discriminate` (tactic)\n#### Usage\n| `discriminate` *induction_arg*?  \"}, \"kind\": 2}";
    "{\"label\": \"ediscriminate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ediscriminate` (tactic)\n#### Usage\n| `ediscriminate` *induction_arg*?  \"}, \"kind\": 2}";
    "{\"label\": \"injection\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `injection` (tactic)\n#### Usage\n| `injection` *induction_arg*? ( `as` *simple_intropattern** )?  \"}, \"kind\": 2}";
    "{\"label\": \"einjection\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `einjection` (tactic)\n#### Usage\n| `einjection` *induction_arg*? ( `as` *simple_intropattern** )?  \"}, \"kind\": 2}";
    "{\"label\": \"replace\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `replace` (tactic)\n#### Usage\n| `replace` *one_term* `with` *one_term* *occurrences*? ( `by` *ltac_expr3* )?  \n| `replace` [ `->` | `<-` ]? *one_term* *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"typeclasses\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `typeclasses` (tactic)\n#### Usage\n| `typeclasses` `eauto` [ `bfs` | `dfs` | `best_effort` ]? *nat_or_var*? ( `with` *ident*+ )?  \n| `typeclasses` `eauto` `best_effort` *nat_or_var*?  \n| `typeclasses` `eauto` `best_effort` *nat_or_var*? `with` *ident*+  \"}, \"kind\": 2}";
    "{\"label\": \"setoid_replace\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_replace` (tactic)\n#### Usage\n| `setoid_replace` *one_term* `with` *one_term* ( `using` `relation` *one_term* )? ( `in` *ident* )? ( `at` *int_or_var*+ )? ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"try\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `try` (tactic)\n#### Usage\n| `try` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"do\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `do` (tactic)\n#### Usage\n| `do` *nat_or_var* *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"timeout\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `timeout` (tactic)\n#### Usage\n| `timeout` *nat_or_var* *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"time\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `time` (tactic)\n#### Usage\n| `time` *string*? *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"repeat\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `repeat` (tactic)\n#### Usage\n| `repeat` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"progress\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `progress` (tactic)\n#### Usage\n| `progress` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"once\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `once` (tactic)\n#### Usage\n| `once` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"exactly_once\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `exactly_once` (tactic)\n#### Usage\n| `exactly_once` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"abstract\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `abstract` (tactic)\n#### Usage\n| `abstract` *ltac_expr2* ( `using` *ident* )?  \n#### Usage (SSReflect)\n| `abstract` *ssrdgens*  \"}, \"kind\": 2}";
    "{\"label\": \"only\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `only` (tactic)\n#### Usage\n| `only` *selector* `:` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"tryif\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `tryif` (tactic)\n#### Usage\n| `tryif` *ltac_expr* `then` *ltac_expr* `else` *ltac_expr2*  \"}, \"kind\": 2}";
    "{\"label\": \"first\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `first` (tactic)\n#### Usage\n| `first` `[` ( *ltac_expr* `|` )* `]`  \"}, \"kind\": 2}";
    "{\"label\": \"solve\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `solve` (tactic)\n#### Usage\n| `solve` `[` ( *ltac_expr* `|` )* `]`  \"}, \"kind\": 2}";
    "{\"label\": \"idtac\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `idtac` (tactic)\n#### Usage\n| `idtac` [ *ident* | *string* | *natural* ]*  \"}, \"kind\": 2}";
    "{\"label\": \"fun\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `fun` (tactic)\n#### Usage\n| `fun` *name*+ `=>` *ltac_expr*  \n| `fun` *name*+ `=>` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"eval\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eval` (tactic)\n#### Usage\n| `eval` *red_expr* `in` *term*  \"}, \"kind\": 2}";
    "{\"label\": \"context\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `context` (tactic)\n#### Usage\n| `context` *ident* `[` *term* `]`  \"}, \"kind\": 2}";
    "{\"label\": \"type\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `type` (tactic)\n#### Usage\n| `type` `of` *term*  \"}, \"kind\": 2}";
    "{\"label\": \"fresh\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `fresh` (tactic)\n#### Usage\n| `fresh` [ *string* | *qualid* ]*  \"}, \"kind\": 2}";
    "{\"label\": \"type_term\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `type_term` (tactic)\n#### Usage\n| `type_term` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"numgoals\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `numgoals` (tactic)\n#### Usage\n| `numgoals`\"}, \"kind\": 2}";
    "{\"label\": \"uconstr\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `uconstr` (tactic)\n#### Usage\n| `uconstr` `:` `(` *term* `)`  \"}, \"kind\": 2}";
    "{\"label\": \"let\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `let` (tactic)\n#### Usage\n| `let` `rec`? *let_clause* ( `with` *let_clause* )* `in` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"case_eq\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `case_eq` (tactic)\n#### Usage\n| `case_eq` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"dependent\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `dependent` (tactic)\n#### Usage\n| `dependent` `destruction` *ident* ( `generalizing` *ident*+ )? ( `using` *one_term* )?  \n| `dependent` `generalize_eqs_vars` *ident*  \n| `dependent` `generalize_eqs` *ident*  \n| `dependent` `induction` *ident* ( [ `generalizing` | `in` ] *ident*+ )? ( `using` *one_term* )?  \n| `dependent` `inversion_clear` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? [ `with` *one_term* ]?  \n| `dependent` `inversion` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? [ `with` *one_term* ]?  \n| `dependent` `rewrite` [ `->` | `<-` ]? *one_term* ( `in` *ident* )?  \n| `dependent` `simple` `inversion` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? [ `with` *one_term* ]?  \"}, \"kind\": 2}";
    "{\"label\": \"cutrewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cutrewrite` (tactic)\n#### Usage\n| `cutrewrite` [ `->` | `<-` ]? *one_type* ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"decompose\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `decompose` (tactic)\n#### Usage\n| `decompose` `[` *one_term*+ `]` *one_term*  \n| `decompose` `record` *one_term*  \n| `decompose` `sum` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"absurd\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `absurd` (tactic)\n#### Usage\n| `absurd` *one_type*  \"}, \"kind\": 2}";
    "{\"label\": \"contradiction\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `contradiction` (tactic)\n#### Usage\n| `contradiction` *one_term_with_bindings*?  \"}, \"kind\": 2}";
    "{\"label\": \"autorewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `autorewrite` (tactic)\n#### Usage\n| `autorewrite` `*`? `with` *ident*+ *occurrences*? ( `using` *ltac_expr* )?  \"}, \"kind\": 2}";
    "{\"label\": \"rewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rewrite` (tactic)\n#### Usage\n| `rewrite` ( *oriented_rewriter* `,` )+ *occurrences*? ( `by` *ltac_expr3* )?  \n| `rewrite` `*` [ `->` | `<-` ]? *one_term* ( `in` *ident* )? ( `at` *rewrite_occs* )? ( `by` *ltac_expr3* )?  \n| `rewrite` `*` [ `->` | `<-` ]? *one_term* `at` *rewrite_occs* `in` *ident* ( `by` *ltac_expr3* )?  \n#### Usage (SSReflect)\n| `rewrite` *rewrite_item*+ *ssr_in*?  \"}, \"kind\": 2}";
    "{\"label\": \"solve_constraints\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `solve_constraints` (tactic)\n#### Usage\n| `solve_constraints`\"}, \"kind\": 2}";
    "{\"label\": \"subst\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `subst` (tactic)\n#### Usage\n| `subst` *ident**  \"}, \"kind\": 2}";
    "{\"label\": \"evar\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `evar` (tactic)\n#### Usage\n| `evar` *one_type*  \n| `evar` `(` *ident* `:` *type* `)`  \"}, \"kind\": 2}";
    "{\"label\": \"instantiate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `instantiate` (tactic)\n#### Usage\n| `instantiate` ( `(` *ident* `:=` *term* `)` )?  \n| `instantiate` `(` *natural* `:=` *term* `)` *hloc*?  \"}, \"kind\": 2}";
    "{\"label\": \"stepl\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `stepl` (tactic)\n#### Usage\n| `stepl` *one_term* ( `by` *ltac_expr* )?  \"}, \"kind\": 2}";
    "{\"label\": \"stepr\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `stepr` (tactic)\n#### Usage\n| `stepr` *one_term* ( `by` *ltac_expr* )?  \"}, \"kind\": 2}";
    "{\"label\": \"generalize_eqs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `generalize_eqs` (tactic)\n#### Usage\n| `generalize_eqs` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"generalize_eqs_vars\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `generalize_eqs_vars` (tactic)\n#### Usage\n| `generalize_eqs_vars` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"specialize_eqs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `specialize_eqs` (tactic)\n#### Usage\n| `specialize_eqs` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"destauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `destauto` (tactic)\n#### Usage\n| `destauto` ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"transparent_abstract\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `transparent_abstract` (tactic)\n#### Usage\n| `transparent_abstract` *ltac_expr3* ( `using` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"constr_eq\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `constr_eq` (tactic)\n#### Usage\n| `constr_eq` *one_term* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"constr_eq_strict\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `constr_eq_strict` (tactic)\n#### Usage\n| `constr_eq_strict` *one_term* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"constr_eq_nounivs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `constr_eq_nounivs` (tactic)\n#### Usage\n| `constr_eq_nounivs` *one_term* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_evar\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_evar` (tactic)\n#### Usage\n| `is_evar` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"has_evar\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `has_evar` (tactic)\n#### Usage\n| `has_evar` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_var\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_var` (tactic)\n#### Usage\n| `is_var` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_fix\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_fix` (tactic)\n#### Usage\n| `is_fix` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_cofix\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_cofix` (tactic)\n#### Usage\n| `is_cofix` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_ind\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_ind` (tactic)\n#### Usage\n| `is_ind` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_constructor\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_constructor` (tactic)\n#### Usage\n| `is_constructor` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_proj\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_proj` (tactic)\n#### Usage\n| `is_proj` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_const\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_const` (tactic)\n#### Usage\n| `is_const` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"shelve\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `shelve` (tactic)\n#### Usage\n| `shelve`\"}, \"kind\": 2}";
    "{\"label\": \"shelve_unifiable\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `shelve_unifiable` (tactic)\n#### Usage\n| `shelve_unifiable`\"}, \"kind\": 2}";
    "{\"label\": \"unshelve\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `unshelve` (tactic)\n#### Usage\n| `unshelve` *ltac_expr1*  \"}, \"kind\": 2}";
    "{\"label\": \"give_up\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `give_up` (tactic)\n#### Usage\n| `give_up`\"}, \"kind\": 2}";
    "{\"label\": \"cycle\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cycle` (tactic)\n#### Usage\n| `cycle` *int_or_var*  \"}, \"kind\": 2}";
    "{\"label\": \"swap\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `swap` (tactic)\n#### Usage\n| `swap` *int_or_var* *int_or_var*  \"}, \"kind\": 2}";
    "{\"label\": \"revgoals\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `revgoals` (tactic)\n#### Usage\n| `revgoals`\"}, \"kind\": 2}";
    "{\"label\": \"guard\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `guard` (tactic)\n#### Usage\n| `guard` *int_or_var* *comparison* *int_or_var*  \"}, \"kind\": 2}";
    "{\"label\": \"optimize_heap\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `optimize_heap` (tactic)\n#### Usage\n| `optimize_heap`\"}, \"kind\": 2}";
    "{\"label\": \"with_strategy\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `with_strategy` (tactic)\n#### Usage\n| `with_strategy` *strategy_level_or_var* `[` *reference*+ `]` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"start\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `start` (tactic)\n#### Usage\n| `start` `ltac` `profiling`  \"}, \"kind\": 2}";
    "{\"label\": \"stop\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `stop` (tactic)\n#### Usage\n| `stop` `ltac` `profiling`  \"}, \"kind\": 2}";
    "{\"label\": \"reset\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `reset` (tactic)\n#### Usage\n| `reset` `ltac` `profile`  \"}, \"kind\": 2}";
    "{\"label\": \"show\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `show` (tactic)\n#### Usage\n| `show` `ltac` `profile` [ `cutoff` *integer* | *string* ]?  \"}, \"kind\": 2}";
    "{\"label\": \"restart_timer\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `restart_timer` (tactic)\n#### Usage\n| `restart_timer` *string*?  \"}, \"kind\": 2}";
    "{\"label\": \"finish_timing\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `finish_timing` (tactic)\n#### Usage\n| `finish_timing` ( `(` *string* `)` )? *string*?  \"}, \"kind\": 2}";
    "{\"label\": \"eassumption\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eassumption` (tactic)\n#### Usage\n| `eassumption`\"}, \"kind\": 2}";
    "{\"label\": \"eexact\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eexact` (tactic)\n#### Usage\n| `eexact` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"trivial\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `trivial` (tactic)\n#### Usage\n| `trivial` *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"info_trivial\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `info_trivial` (tactic)\n#### Usage\n| `info_trivial` *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"debug\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `debug` (tactic)\n#### Usage\n| `debug` `auto` *nat_or_var*? *auto_using*? *hintbases*?  \n| `debug` `eauto` *nat_or_var*? *auto_using*? *hintbases*?  \n| `debug` `trivial` *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"auto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `auto` (tactic)\n#### Usage\n| `auto` *nat_or_var*? *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"info_auto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `info_auto` (tactic)\n#### Usage\n| `info_auto` *nat_or_var*? *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"eauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eauto` (tactic)\n#### Usage\n| `eauto` *nat_or_var*? *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"info_eauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `info_eauto` (tactic)\n#### Usage\n| `info_eauto` *nat_or_var*? *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"dfs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `dfs` (tactic)\n#### Usage\n| `dfs` `eauto` *nat_or_var*? *auto_using*? *hintbases*?  \"}, \"kind\": 2}";
    "{\"label\": \"autounfold\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `autounfold` (tactic)\n#### Usage\n| `autounfold` *hintbases*? *simple_occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"autounfold_one\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `autounfold_one` (tactic)\n#### Usage\n| `autounfold_one` *hintbases*? ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"unify\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `unify` (tactic)\n#### Usage\n| `unify` *one_term* *one_term* ( `with` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"head_of_constr\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `head_of_constr` (tactic)\n#### Usage\n| `head_of_constr` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"not_evar\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `not_evar` (tactic)\n#### Usage\n| `not_evar` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"is_ground\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `is_ground` (tactic)\n#### Usage\n| `is_ground` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"autoapply\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `autoapply` (tactic)\n#### Usage\n| `autoapply` *one_term* `with` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"rewrite_strat\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rewrite_strat` (tactic)\n#### Usage\n| `rewrite_strat` *rewstrategy* ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"rewrite_db\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rewrite_db` (tactic)\n#### Usage\n| `rewrite_db` *ident* ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"substitute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `substitute` (tactic)\n#### Usage\n| `substitute` [ `->` | `<-` ]? *one_term_with_bindings*  \"}, \"kind\": 2}";
    "{\"label\": \"setoid_rewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_rewrite` (tactic)\n#### Usage\n| `setoid_rewrite` [ `->` | `<-` ]? *one_term_with_bindings* ( `at` *rewrite_occs* )? ( `in` *ident* )?  \n| `setoid_rewrite` [ `->` | `<-` ]? *one_term_with_bindings* `in` *ident* `at` *rewrite_occs*  \"}, \"kind\": 2}";
    "{\"label\": \"setoid_symmetry\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_symmetry` (tactic)\n#### Usage\n| `setoid_symmetry` ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"setoid_reflexivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_reflexivity` (tactic)\n#### Usage\n| `setoid_reflexivity`\"}, \"kind\": 2}";
    "{\"label\": \"setoid_transitivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_transitivity` (tactic)\n#### Usage\n| `setoid_transitivity` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"setoid_etransitivity\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `setoid_etransitivity` (tactic)\n#### Usage\n| `setoid_etransitivity`\"}, \"kind\": 2}";
    "{\"label\": \"eintros\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eintros` (tactic)\n#### Usage\n| `eintros` *intropattern**  \"}, \"kind\": 2}";
    "{\"label\": \"decide\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `decide` (tactic)\n#### Usage\n| `decide` *one_term* `with` *one_term*  \n| `decide` `equality`  \"}, \"kind\": 2}";
    "{\"label\": \"compare\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `compare` (tactic)\n#### Usage\n| `compare` *one_term* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"apply\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `apply` (tactic)\n#### Usage\n| `apply` ( *one_term_with_bindings* `,` )+ *in_hyp_as*?  \n#### Usage (SSReflect)\n| `apply` *ssrapplyarg*?  \"}, \"kind\": 2}";
    "{\"label\": \"eapply\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eapply` (tactic)\n#### Usage\n| `eapply` ( *one_term_with_bindings* `,` )+ *in_hyp_as*?  \"}, \"kind\": 2}";
    "{\"label\": \"elim\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `elim` (tactic)\n#### Usage\n| `elim` *one_term_with_bindings* ( `using` *one_term_with_bindings* )?  \n#### Usage (SSReflect)\n| `elim` ( *ssrarg* *ssr_in*? )?  \"}, \"kind\": 2}";
    "{\"label\": \"eelim\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eelim` (tactic)\n#### Usage\n| `eelim` *one_term_with_bindings* ( `using` *one_term_with_bindings* )?  \"}, \"kind\": 2}";
    "{\"label\": \"case\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `case` (tactic)\n#### Usage\n| `case` ( *induction_clause* `,` )+ *induction_principle*?  \n#### Usage (SSReflect)\n| `case` ( *ssrarg* *ssr_in*? )?  \"}, \"kind\": 2}";
    "{\"label\": \"ecase\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ecase` (tactic)\n#### Usage\n| `ecase` ( *induction_clause* `,` )+ *induction_principle*?  \"}, \"kind\": 2}";
    "{\"label\": \"fix\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `fix` (tactic)\n#### Usage\n| `fix` *ident* *natural* ( `with` ( `(` *ident* *simple_binder** ( `{` `struct` *name* `}` )? `:` *type* `)` )+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"cofix\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cofix` (tactic)\n#### Usage\n| `cofix` *ident* ( `with` ( `(` *ident* *simple_binder** `:` *type* `)` )+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"pose\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `pose` (tactic)\n#### Usage\n| `pose` *alias_definition*  \n| `pose` *one_term* *as_name*?  \n| `pose` `proof` *term* *as_ipat*?  \n| `pose` `proof` `(` *ident* `:=` *term* `)`  \n#### Usage (SSReflect)\n| `pose` *ident* *ssrbinder** *ssrdefbody*  \n| `pose` `cofix` *ssrbvar* *ssrbinder** *ssrdefbody*  \n| `pose` `fix` *ssrbvar* *ssrbinder** ( `{` `struct` *ident* `}` )? *ssrdefbody*  \"}, \"kind\": 2}";
    "{\"label\": \"epose\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `epose` (tactic)\n#### Usage\n| `epose` *alias_definition*  \n| `epose` *one_term* *as_name*?  \n| `epose` `proof` *term* *as_ipat*?  \n| `epose` `proof` `(` *ident* `:=` *term* `)`  \"}, \"kind\": 2}";
    "{\"label\": \"set\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `set` (tactic)\n#### Usage\n| `set` *alias_definition* *occurrences*?  \n| `set` *one_term* *as_name*? *occurrences*?  \n#### Usage (SSReflect)\n| `set` *ident* ( `:` *term* )? `:=` [ `{` *ssr_occurrences* `}` *cpattern* | *lcpattern* ] *ssr_in*?  \"}, \"kind\": 2}";
    "{\"label\": \"eset\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eset` (tactic)\n#### Usage\n| `eset` *alias_definition* *occurrences*?  \n| `eset` *one_term* *as_name*? *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"remember\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `remember` (tactic)\n#### Usage\n| `remember` *one_term* *as_name*? ( `eqn` `:` *naming_intropattern* )? ( `in` *goal_occurrences* )?  \"}, \"kind\": 2}";
    "{\"label\": \"eremember\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eremember` (tactic)\n#### Usage\n| `eremember` *one_term* *as_name*? ( `eqn` `:` *naming_intropattern* )? ( `in` *goal_occurrences* )?  \"}, \"kind\": 2}";
    "{\"label\": \"assert\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `assert` (tactic)\n#### Usage\n| `assert` *one_type* *as_ipat*? ( `by` *ltac_expr3* )?  \n| `assert` `(` *ident* `:=` *term* `)`  \n| `assert` `(` *ident* `:` *type* `)` ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"eassert\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eassert` (tactic)\n#### Usage\n| `eassert` *one_type* *as_ipat*? ( `by` *ltac_expr3* )?  \n| `eassert` `(` *ident* `:=` *term* `)`  \n| `eassert` `(` *ident* `:` *type* `)` ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"enough\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `enough` (tactic)\n#### Usage\n| `enough` *one_type* *as_ipat*? ( `by` *ltac_expr3* )?  \n| `enough` `(` *ident* `:` *type* `)` ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"eenough\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `eenough` (tactic)\n#### Usage\n| `eenough` *one_type* *as_ipat*? ( `by` *ltac_expr3* )?  \n| `eenough` `(` *ident* `:` *type* `)` ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"generalize\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `generalize` (tactic)\n#### Usage\n| `generalize` *one_term*+  \n| `generalize` [ *pattern_occs* *as_name*? `,` ]+  \n| `generalize` `dependent` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"induction\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `induction` (tactic)\n#### Usage\n| `induction` ( *induction_clause* `,` )+ *induction_principle*?  \"}, \"kind\": 2}";
    "{\"label\": \"einduction\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `einduction` (tactic)\n#### Usage\n| `einduction` ( *induction_clause* `,` )+ *induction_principle*?  \"}, \"kind\": 2}";
    "{\"label\": \"destruct\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `destruct` (tactic)\n#### Usage\n| `destruct` ( *induction_clause* `,` )+ *induction_principle*?  \"}, \"kind\": 2}";
    "{\"label\": \"edestruct\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `edestruct` (tactic)\n#### Usage\n| `edestruct` ( *induction_clause* `,` )+ *induction_principle*?  \"}, \"kind\": 2}";
    "{\"label\": \"erewrite\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `erewrite` (tactic)\n#### Usage\n| `erewrite` ( *oriented_rewriter* `,` )+ *occurrences*? ( `by` *ltac_expr3* )?  \"}, \"kind\": 2}";
    "{\"label\": \"inversion\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `inversion` (tactic)\n#### Usage\n| `inversion` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? ( `in` *ident*+ )?  \n| `inversion` [ *ident* | *natural* ] `using` *one_term* ( `in` *ident*+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"inversion_clear\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `inversion_clear` (tactic)\n#### Usage\n| `inversion_clear` [ *ident* | *natural* ] ( `as` *or_and_intropattern* )? ( `in` *ident*+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"red\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `red` (tactic)\n#### Usage\n| `red` *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"hnf\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `hnf` (tactic)\n#### Usage\n| `hnf` *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"simpl\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `simpl` (tactic)\n#### Usage\n| `simpl` *delta_reductions*? [ *reference_occs* | *pattern_occs* ]? *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"cbv\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cbv` (tactic)\n#### Usage\n| `cbv` *reductions*? *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"cbn\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `cbn` (tactic)\n#### Usage\n| `cbn` *reductions*? *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"lazy\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `lazy` (tactic)\n#### Usage\n| `lazy` *reductions*? *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"compute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `compute` (tactic)\n#### Usage\n| `compute` *delta_reductions*? *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"vm_compute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `vm_compute` (tactic)\n#### Usage\n| `vm_compute` [ *reference_occs* | *pattern_occs* ]? *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"native_compute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `native_compute` (tactic)\n#### Usage\n| `native_compute` [ *reference_occs* | *pattern_occs* ]? *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"unfold\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `unfold` (tactic)\n#### Usage\n| `unfold` ( *reference_occs* `,` )+ *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"fold\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `fold` (tactic)\n#### Usage\n| `fold` *one_term*+ *simple_occurrences*  \"}, \"kind\": 2}";
    "{\"label\": \"pattern\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `pattern` (tactic)\n#### Usage\n| `pattern` ( *pattern_occs* `,` )+ *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"change\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `change` (tactic)\n#### Usage\n| `change` ( *one_term* ( `at` *occs_nums* )? `with` )? *one_term* *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"change_no_check\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `change_no_check` (tactic)\n#### Usage\n| `change_no_check` ( *one_term* ( `at` *occs_nums* )? `with` )? *one_term* *occurrences*?  \"}, \"kind\": 2}";
    "{\"label\": \"btauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `btauto` (tactic)\n#### Usage\n| `btauto`\"}, \"kind\": 2}";
    "{\"label\": \"rtauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rtauto` (tactic)\n#### Usage\n| `rtauto`\"}, \"kind\": 2}";
    "{\"label\": \"congruence\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `congruence` (tactic)\n#### Usage\n| `congruence` *natural*? ( `with` *one_term*+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"f_equal\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `f_equal` (tactic)\n#### Usage\n| `f_equal`\"}, \"kind\": 2}";
    "{\"label\": \"firstorder\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `firstorder` (tactic)\n#### Usage\n| `firstorder` *ltac_expr*? ( `using` ( *qualid* `,` )+ )? ( `with` *ident*+ )?  \"}, \"kind\": 2}";
    "{\"label\": \"gintuition\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `gintuition` (tactic)\n#### Usage\n| `gintuition` *ltac_expr*?  \"}, \"kind\": 2}";
    "{\"label\": \"functional\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `functional` (tactic)\n#### Usage (funind plugin)\n| `functional` `induction` *term* ( `using` *one_term_with_bindings* )? ( `as` *simple_intropattern* )?  \n| `functional` `inversion` [ *ident* | *natural* ] *qualid*?  \"}, \"kind\": 2}";
    "{\"label\": \"soft\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `soft` (tactic)\n#### Usage (funind plugin)\n| `soft` `functional` `induction` *one_term*+ ( `using` *one_term_with_bindings* )? ( `as` *simple_intropattern* )?  \"}, \"kind\": 2}";
    "{\"label\": \"xlra_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xlra_Q` (tactic)\n#### Usage (micromega plugin)\n| `xlra_Q` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wlra_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wlra_Q` (tactic)\n#### Usage (micromega plugin)\n| `wlra_Q` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xlra_R\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xlra_R` (tactic)\n#### Usage (micromega plugin)\n| `xlra_R` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"xlia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xlia` (tactic)\n#### Usage (micromega plugin)\n| `xlia` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wlia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wlia` (tactic)\n#### Usage (micromega plugin)\n| `wlia` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xnra_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xnra_Q` (tactic)\n#### Usage (micromega plugin)\n| `xnra_Q` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wnra_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wnra_Q` (tactic)\n#### Usage (micromega plugin)\n| `wnra_Q` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xnra_R\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xnra_R` (tactic)\n#### Usage (micromega plugin)\n| `xnra_R` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"xnia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xnia` (tactic)\n#### Usage (micromega plugin)\n| `xnia` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wnia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wnia` (tactic)\n#### Usage (micromega plugin)\n| `wnia` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xsos_Z\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xsos_Z` (tactic)\n#### Usage (micromega plugin)\n| `xsos_Z` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wsos_Z\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wsos_Z` (tactic)\n#### Usage (micromega plugin)\n| `wsos_Z` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xsos_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xsos_Q` (tactic)\n#### Usage (micromega plugin)\n| `xsos_Q` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wsos_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wsos_Q` (tactic)\n#### Usage (micromega plugin)\n| `wsos_Q` *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xsos_R\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xsos_R` (tactic)\n#### Usage (micromega plugin)\n| `xsos_R` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"xpsatz_Z\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xpsatz_Z` (tactic)\n#### Usage (micromega plugin)\n| `xpsatz_Z` *nat_or_var* *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wpsatz_Z\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wpsatz_Z` (tactic)\n#### Usage (micromega plugin)\n| `wpsatz_Z` *nat_or_var* *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xpsatz_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xpsatz_Q` (tactic)\n#### Usage (micromega plugin)\n| `xpsatz_Q` *nat_or_var* *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"wpsatz_Q\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `wpsatz_Q` (tactic)\n#### Usage (micromega plugin)\n| `wpsatz_Q` *nat_or_var* *ident* *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"xpsatz_R\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `xpsatz_R` (tactic)\n#### Usage (micromega plugin)\n| `xpsatz_R` *nat_or_var* *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"zify_iter_specs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify_iter_specs` (tactic)\n#### Usage (micromega plugin)\n| `zify_iter_specs`   \"}, \"kind\": 2}";
    "{\"label\": \"zify_op\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify_op` (tactic)\n#### Usage (micromega plugin)\n| `zify_op`   \"}, \"kind\": 2}";
    "{\"label\": \"zify_saturate\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify_saturate` (tactic)\n#### Usage (micromega plugin)\n| `zify_saturate`   \"}, \"kind\": 2}";
    "{\"label\": \"zify_iter_let\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify_iter_let` (tactic)\n#### Usage (micromega plugin)\n| `zify_iter_let` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"zify_elim_let\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify_elim_let` (tactic)\n#### Usage (micromega plugin)\n| `zify_elim_let`   \"}, \"kind\": 2}";
    "{\"label\": \"nsatz_compute\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `nsatz_compute` (tactic)\n#### Usage (nsatz plugin)\n| `nsatz_compute` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"protect_fv\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `protect_fv` (tactic)\n#### Usage\n| `protect_fv` *string* ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"ring_lookup\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ring_lookup` (tactic)\n#### Usage (ring plugin)\n| `ring_lookup` *ltac_expr0* `[` *one_term** `]` *one_term*+  \n| `ring_lookup` *ltac_expr0* `[` *one_term** `]` *one_term*+  \"}, \"kind\": 2}";
    "{\"label\": \"field_lookup\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `field_lookup` (tactic)\n#### Usage (ring plugin)\n| `field_lookup` *ltac_expr* `[` *one_term** `]` *one_term*+  \n| `field_lookup` *ltac_expr* `[` *one_term** `]` *one_term*+  \"}, \"kind\": 2}";
    "{\"label\": \"by\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `by` (tactic)\n#### Usage (SSReflect)\n| `by` *ssrhintarg*  \n#### Usage (ltac2 plugin)\n| `by` *ltac2_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"congr\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `congr` (tactic)\n#### Usage (SSReflect)\n| `congr` *natural*? *one_term* *ssrdgens*?  \"}, \"kind\": 2}";
    "{\"label\": \"ssrinstancesofruleL2R\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ssrinstancesofruleL2R` (tactic)\n#### Usage (SSReflect)\n| `ssrinstancesofruleL2R` *term*  \"}, \"kind\": 2}";
    "{\"label\": \"ssrinstancesofruleR2L\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ssrinstancesofruleR2L` (tactic)\n#### Usage (SSReflect)\n| `ssrinstancesofruleR2L` *term*  \"}, \"kind\": 2}";
    "{\"label\": \"unlock\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `unlock` (tactic)\n#### Usage (SSReflect)\n| `unlock` ( ( `{` *ssr_occurrences* `}` )? *term* )* *ssr_in*?  \"}, \"kind\": 2}";
    "{\"label\": \"have\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `have` (tactic)\n#### Usage (SSReflect)\n| `have` *ssrhpats_wtransp* *ssrbinder** *ssrhavefwd*  \n| `have` [ `suff` | `suffices` ] *ssripats*? *ssrhavefwd*  \"}, \"kind\": 2}";
    "{\"label\": \"under\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `under` (tactic)\n#### Usage (SSReflect)\n| `under` *rewrite_item* *ssrintros*? ( `do` *ssrhint3arg* )?  \"}, \"kind\": 2}";
    "{\"label\": \"ssrinstancesoftpat\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ssrinstancesoftpat` (tactic)\n#### Usage (SSReflect)\n| `ssrinstancesoftpat` *ssr_one_term_pattern*  \"}, \"kind\": 2}";
    "{\"label\": \"classical_left\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `classical_left` (tactic)\n#### Usage\n| `classical_left`\"}, \"kind\": 2}";
    "{\"label\": \"classical_right\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `classical_right` (tactic)\n#### Usage\n| `classical_right`\"}, \"kind\": 2}";
    "{\"label\": \"contradict\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `contradict` (tactic)\n#### Usage\n| `contradict` *ident*  \"}, \"kind\": 2}";
    "{\"label\": \"dintuition\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `dintuition` (tactic)\n#### Usage\n| `dintuition` *ltac_expr*?  \"}, \"kind\": 2}";
    "{\"label\": \"discrR\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `discrR` (tactic)\n#### Usage\n| `discrR`\"}, \"kind\": 2}";
    "{\"label\": \"dtauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `dtauto` (tactic)\n#### Usage\n| `dtauto`\"}, \"kind\": 2}";
    "{\"label\": \"easy\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `easy` (tactic)\n#### Usage\n| `easy`\"}, \"kind\": 2}";
    "{\"label\": \"exfalso\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `exfalso` (tactic)\n#### Usage\n| `exfalso`\"}, \"kind\": 2}";
    "{\"label\": \"inversion_sigma\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `inversion_sigma` (tactic)\n#### Usage\n| `inversion_sigma` ( *ident* ( `as` *simple_intropattern* )? )?  \"}, \"kind\": 2}";
    "{\"label\": \"lia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `lia` (tactic)\n#### Usage\n| `lia`\"}, \"kind\": 2}";
    "{\"label\": \"lra\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `lra` (tactic)\n#### Usage\n| `lra`\"}, \"kind\": 2}";
    "{\"label\": \"nia\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `nia` (tactic)\n#### Usage\n| `nia`\"}, \"kind\": 2}";
    "{\"label\": \"now_show\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `now_show` (tactic)\n#### Usage\n| `now_show` *one_type*  \"}, \"kind\": 2}";
    "{\"label\": \"nra\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `nra` (tactic)\n#### Usage\n| `nra`\"}, \"kind\": 2}";
    "{\"label\": \"over\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `over` (tactic)\n#### Usage (SSReflect)\n| `over`   \"}, \"kind\": 2}";
    "{\"label\": \"rapply\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `rapply` (tactic)\n#### Usage\n| `rapply` *one_term*  \"}, \"kind\": 2}";
    "{\"label\": \"split_Rabs\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `split_Rabs` (tactic)\n#### Usage\n| `split_Rabs`\"}, \"kind\": 2}";
    "{\"label\": \"split_Rmult\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `split_Rmult` (tactic)\n#### Usage\n| `split_Rmult`\"}, \"kind\": 2}";
    "{\"label\": \"tauto\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `tauto` (tactic)\n#### Usage\n| `tauto`\"}, \"kind\": 2}";
    "{\"label\": \"time_constr\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `time_constr` (tactic)\n#### Usage\n| `time_constr` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"zify\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `zify` (tactic)\n#### Usage\n| `zify`\"}, \"kind\": 2}";
    "{\"label\": \"assert_fails\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `assert_fails` (tactic)\n#### Usage\n| `assert_fails` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"assert_succeeds\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `assert_succeeds` (tactic)\n#### Usage\n| `assert_succeeds` *ltac_expr3*  \"}, \"kind\": 2}";
    "{\"label\": \"field\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `field` (tactic)\n#### Usage\n| `field` ( `[` *one_term*+ `]` )?  \"}, \"kind\": 2}";
    "{\"label\": \"field_simplify\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `field_simplify` (tactic)\n#### Usage\n| `field_simplify` ( `[` *one_term*+ `]` )? *one_term*+ ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"field_simplify_eq\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `field_simplify_eq` (tactic)\n#### Usage\n| `field_simplify_eq` ( `[` *one_term*+ `]` )? ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"intuition\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `intuition` (tactic)\n#### Usage\n| `intuition` *ltac_expr*?  \"}, \"kind\": 2}";
    "{\"label\": \"now\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `now` (tactic)\n#### Usage\n| `now` *ltac_expr*  \"}, \"kind\": 2}";
    "{\"label\": \"nsatz\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `nsatz` (tactic)\n#### Usage\n| `nsatz` ( `with` `radicalmax` `:=` *one_term* `strategy` `:=` *one_term* `parameters` `:=` *one_term* `variables` `:=` *one_term* )?  \"}, \"kind\": 2}";
    "{\"label\": \"psatz\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `psatz` (tactic)\n#### Usage\n| `psatz` *one_term* *nat_or_var*?  \"}, \"kind\": 2}";
    "{\"label\": \"ring\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ring` (tactic)\n#### Usage\n| `ring` ( `[` *one_term*+ `]` )?  \"}, \"kind\": 2}";
    "{\"label\": \"ring_simplify\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `ring_simplify` (tactic)\n#### Usage\n| `ring_simplify` ( `[` *one_term*+ `]` )? *one_term*+ ( `in` *ident* )?  \"}, \"kind\": 2}";
    "{\"label\": \"match\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `match` (tactic)\n#### Usage\n| `match` *ltac2_expr5* `with` *ltac2_branches*? `end`  \"}, \"kind\": 2}";
    "{\"label\": \"if\", \"documentation\": {\"kind\": \"markdown\", \"value\": \"### `if` (tactic)\n#### Usage\n| `if` *ltac2_expr5* `then` *ltac2_expr5* `else` *ltac2_expr5*  \"}, \"kind\": 2}"]

  let tactic = List.map Yojson.Safe.from_string tacticJson

end
